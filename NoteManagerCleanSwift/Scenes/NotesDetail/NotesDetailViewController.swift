//
//  NotesDetailViewController.swift
//  NoteManagerCleanSwift
//
//  Created by Lada Vrska on 19/10/2019.
//  Copyright (c) 2019 Lada Vrska. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NotesDetailDisplayLogic: class, AppDisplayable {
  func displaySomething(viewModel: NotesDetail.FetchNote.ViewModel)
}

class NotesDetailViewController: UIViewController, NotesDetailDisplayLogic, UITextViewDelegate {
  var activityIndicator = UIActivityIndicatorView()
  
  var interactor: NotesDetailBusinessLogic?
  var router: (NSObjectProtocol & NotesDetailRoutingLogic & NotesDetailDataPassing)?
  
  var input: InputView?
  var topOffset: CGFloat = 110

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = NotesDetailInteractor()
    let presenter = NotesDetailPresenter()
    let router = NotesDetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing

  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
    self.view.backgroundColor = .white
    let myNote = self.router?.dataStore?.note
    print("Notes detail note: \(String(describing: myNote))")
    
    // populateNavigationBar(title: "My notees")
    prepareInput()
    loadData()
  }
  
  // MARK: - InputView
  
  func prepareInput() {
    let inputView = InputView(hasBorder: false)
    view.addSubview(inputView)
    inputView.inputViewDelegate = self
    inputView.hasBorder = false
    inputView.backgroundColor = .lightGray
    inputView.snp.makeConstraints { (maker) in
      maker.top.equalToSuperview().offset(self.topOffset)
      maker.left.equalToSuperview().offset(30)
      maker.bottom.equalToSuperview().offset(-20)
      maker.right.equalToSuperview().offset(-30)
    }
    input = inputView
  }
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func loadData() {
    let request = NotesDetail.FetchNote.Request()
    interactor?.fetchNote(request: request)
  }
  
  func displaySomething(viewModel: NotesDetail.FetchNote.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}
